# -*- coding: utf-8 -*-
"""sentence_comparison.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mu2ieUHvC9syCkvpY1zqYaw0CxLvJwNS

created on Sat Aug 7, 2021
@author: Unihack_7
"""

#pip version 21.1.3, as default in Google Colab
#python 3.7
#tensorflow2 in use
#Check to install the three files manually
#tf-models-official==2.4.0
#tensorflow_text installed
#import relevant modules
import os
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import tensorflow_hub as hub
import tensorflow_text as text
from official.modeling import tf_utils
from official import nlp
from official.nlp import bert
from official.nlp import optimization
import official.nlp.optimization
import official.nlp.bert.bert_models
import official.nlp.bert.configs
import official.nlp.bert.run_classifier
import official.nlp.bert.tokenization
import official.nlp.data.classifier_data_lib
import official.nlp.modeling.losses
import official.nlp.modeling.models
import official.nlp.modeling.networks
import math
import hashlib
#%%
os.environ["TFHUB_CACHE_DIR"] = 'Desktop/tfhackathon/tmp/tfhub'

text_in = tf.keras.layers.Input(shape=(), dtype=tf.string)
preprocessor = hub.KerasLayer('tmp/tfhub/46366be5166fe17634f35ea7e6f1378dcabc7165/md')
processed = preprocessor(text_in)
encoder = hub.KerasLayer('tmp/tfhub/dc7ec0c6c8ed5b862891094bcbdf776b7a54dea7/md')
outputs = encoder(processed)
pooled_output = outputs["pooled_output"] 
word_embeddings = tf.keras.Model(text_in, pooled_output)

#distance calculation 
def distance(v1, v2):
  s = 0
  for i, v in enumerate(v1):
    difsqr = (v - v2[i])**2
    s = s + difsqr
  return s
#
def scom(s1, s2, difficulty = 10, rt_distance = False):
  sentence_1 = word_embeddings(tf.constant([s1]))
  sentence_2 = word_embeddings(tf.constant([s2]))
  if rt_distance:
    return distance(sentence_1.numpy()[0], sentence_2.numpy()[0])
  score = int(100*(1-(math.tanh((distance(sentence_1.numpy()[0], sentence_2.numpy()[0])-(100 - difficulty*6))/70)))**2/2)
  if score > 100:
    score = 100
  return score

def main(difficulty = 3):
    in1 = input('type your answer here: ')
    in2 = input('type your prediction here: ')
    sc = scom(in1, in2, difficulty)
    return sc
"""Source: https://tfhub.dev/tensorflow/bert_zh_L-12_H-768_A-12/4"""

# %%
